{"version":3,"sources":["dmDiana.ts","index.tsx"],"names":["cailaIntentEndpoint","process","REACT_APP_CAILA","say","text","send","_context","type","value","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","welcome","RECOGNISED","target","cond","context","_evt","recResult","utterance","TIMEOUT","prompt","entry","ENDSPEECH","ask","next","invoke","id","src","query","fetch","Request","method","headers","then","data","json","onDone","_ctx","event","intent","path","napoleon","nenapoleon","supermarket","prompt2","ask2","prompt3","stop","always","repaint","actions","cancel","REGION","inspect","url","iframe","machine","Machine","dm","gui","micOnly","SHOW_ALTERNATIVES","showAlternatives","SELECT","asrtts","assign","audioCtx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","getAuthorizationToken","azureAuthorizationToken","onError","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","voice","find","v","test","name","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","recStart","asEffect","asr","start","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.4286951d.chunk.js","sourcesContent":["import { MachineConfig, send, Action } from \"xstate\";\r\n\r\nconst cailaIntentEndpoint = `https://cors.eu.org/https://app.jaicp.com/cailapub/api/caila/p/${process.env.REACT_APP_CAILA}/nlu/inference?query=`\r\n\r\n\r\nconst cailaGetIntent = (query: string) => fetch(new Request(\r\n    cailaIntentEndpoint + query, \r\n    { method: 'GET', headers: { 'Origin': 'https://maraev.me/'}})).then(data => data.json())\r\n\r\n// const sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\r\n//     type: \"SPEAK\", value: `Repainting to ${context.recResult[0].utterance}`\r\n// }))\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'idle',\r\n    states: {\r\n        idle: {\r\n            on: {\r\n                CLICK: 'init'\r\n            }\r\n        },\r\n        init: {\r\n            on: {\r\n                TTS_READY: 'welcome',\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        \r\n        welcome: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {target:'supermarket', cond:(context, _evt) => context.recResult[0].utterance === 'Супермаркет.'}, \r\n                    {target:'.next'}\r\n                ],\r\n                TIMEOUT: '..',\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Привет! Спроси меня что-нибудь.\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                next: {\r\n                    invoke: {\r\n                        id: \"nlInput\",\r\n                        src: (context, _evt) => cailaGetIntent(context.recResult[0].utterance),\r\n                        onDone: [{\r\n                            target: 'napoleon',\r\n                            cond: (_ctx, event) => event.data.intent.path === \"/Answer:Napoleon\"\r\n                        },\r\n                        {target: 'nenapoleon'}]\r\n                    },\r\n\r\n                },\r\n                napoleon: {\r\n                    entry: say('Наполеон!')\r\n                },\r\n                nenapoleon: {\r\n                    entry: say('Не наполеон!')\r\n                }\r\n            }\r\n        },\r\n\r\n        supermarket: {\r\n            initial:'prompt', \r\n            states: { \r\n                prompt: { \r\n                    entry: say(\"Вот ты приходишь в магазин и, например, я - продавец. Ты должен что-то купить, например, мама или папа тебя попросили: у нас закончились хлеб и молоко, сходи купи пожалуйста в магазин. Что ты будешь делать?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {entry:send('LISTEN'), on:{RECOGNISED:'prompt2'}},\r\n                prompt2:{\r\n                    entry: say(\"Угу. Что дальше?\"),\r\n                    on: { ENDSPEECH: 'ask2' }\r\n                },\r\n                ask2: {entry:send('LISTEN'), on:{RECOGNISED:'prompt3'}},\r\n                prompt3:{\r\n                    entry: say(\"ну допустим вот я продавец, да? и если у тебя не хватает денег и ты взял молоко дороже, чем у тебя есть денег, и я говорю у вас не хватает 15 рублей. Что тогда?\"),\r\n                    on: { ENDSPEECH: '#root.dm.init' }\r\n                    }\r\n            }\r\n        },\r\n\r\n        stop: {\r\n            entry: say(\"Ok\"),\r\n            always: 'init'\r\n        },\r\n        repaint: {\r\n            initial: 'prompt',\r\n            states: {\r\n                prompt: {\r\n                    // entry: sayColour,\r\n                    on: { ENDSPEECH: 'repaint' }\r\n                },\r\n                repaint: {\r\n                    entry: 'changeColour',\r\n                    always: '#root.dm.welcome'\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, actions, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\n// import { tdmDmMachine } from \"./tdmClient\";\r\n// import { jaicpDmMachine } from \"./jaicpClient\";\r\nimport { dmMachine } from \"./dmDiana\";\r\n\r\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\r\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\r\n\r\n// if (process.env.REACT_APP_BACKEND === 'TDM') {\r\n//     dm = tdmDmMachine\r\n// } else if (process.env.REACT_APP_BACKEND === 'JAICP') {\r\n//     dm = jaicpDmMachine\r\n// }\r\n\r\n\r\nconst { send, cancel } = actions\r\n\r\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\r\nconst REGION = 'northeurope';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nconst defaultPassivity = 10\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n\r\n        gui: {\r\n            initial: 'micOnly',\r\n            states: {\r\n                micOnly: {\r\n                    on: { SHOW_ALTERNATIVES: 'showAlternatives' },\r\n                },\r\n                showAlternatives: {\r\n                    on: { SELECT: 'micOnly' },\r\n                }\r\n            }\r\n        },\r\n\r\n        asrtts: {\r\n            initial: 'init',\r\n            states: {\r\n                init: {\r\n                    on: {\r\n                        CLICK: {\r\n                            target: 'getToken',\r\n                            actions: [\r\n                                assign({\r\n                                    audioCtx: (_ctx) =>\r\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n                                }),\r\n                                (context) =>\r\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\r\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                getToken: {\r\n                    invoke: {\r\n                        id: \"getAuthorizationToken\",\r\n                        src: (_ctx, _evt) => getAuthorizationToken(),\r\n                        onDone: {\r\n                            actions: [\r\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\r\n                                'ponyfillASR'],\r\n                            target: 'ponyfillTTS'\r\n                        },\r\n                        onError: {\r\n                            target: 'fail'\r\n                        }\r\n                    }\r\n                },\r\n                ponyfillTTS: {\r\n                    invoke: {\r\n                        id: 'ponyTTS',\r\n                        src: (context, _event) => (callback, _onReceive) => {\r\n                            const ponyfill = createSpeechSynthesisPonyfill({\r\n                                audioContext: context.audioCtx,\r\n                                credentials: {\r\n                                    region: REGION,\r\n                                    authorizationToken: context.azureAuthorizationToken,\r\n                                }\r\n                            });\r\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\r\n                            context.tts = speechSynthesis\r\n                            context.ttsUtterance = SpeechSynthesisUtterance\r\n                            context.tts.addEventListener('voiceschanged', () => {\r\n                                context.tts.cancel()\r\n                                const voices = context.tts.getVoices();\r\n                                let voiceRe = RegExp(\"en-US\", 'u')\r\n                                if (process.env.REACT_APP_TTS_VOICE) {\r\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\r\n                                }\r\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\r\n                                if (voice) {\r\n                                    context.voice = voice\r\n                                    callback('TTS_READY')\r\n                                } else {\r\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\r\n                                    callback('TTS_ERROR')\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                    on: {\r\n                        TTS_READY: 'idle',\r\n                        TTS_ERROR: 'fail'\r\n                    }\r\n                },\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    },\r\n                },\r\n                recognising: {\r\n                    initial: 'noinput',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => {\r\n                                    return {\r\n                                        recResult: event.value\r\n                                    }\r\n                                })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: '.pause'\r\n                    },\r\n                    states: {\r\n                        noinput: {\r\n                            entry: [\r\n                                'recStart',\r\n                                send(\r\n                                    { type: 'TIMEOUT' },\r\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\r\n                                )],\r\n                            on: {\r\n                                TIMEOUT: '#root.asrtts.idle',\r\n                                STARTSPEECH: 'inprogress'\r\n                            },\r\n                            exit: cancel('timeout')\r\n                        },\r\n                        inprogress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                        pause: {\r\n                            entry: 'recStop',\r\n                            on: { CLICK: 'noinput' }\r\n                        }\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\r\n                    },\r\n                    exit: 'ttsStop',\r\n                },\r\n                fail: {}\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n    alternative: any;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"name\") || {}).value;\r\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"image\") || {}).value;\r\n    var circleClass = \"circle\"\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\r\n            break;\r\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\r\n            promptText = \"Click to continue\"\r\n            break;\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            circleClass = \"circle-recognising\"\r\n            promptText = promptText || 'Listening...'\r\n            break;\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            circleClass = \"circle-speaking\"\r\n            promptText = promptText || 'Speaking...'\r\n            break;\r\n        case props.state.matches({ dm: 'idle' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        case props.state.matches({ dm: 'init' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        default:\r\n            promptText = promptText || '\\u00A0'\r\n    }\r\n    return (\r\n        <div className=\"control\">\r\n            <figure className=\"prompt\">\r\n                {promptImage &&\r\n                    <img src={promptImage}\r\n                        alt={promptText} />}\r\n            </figure>\r\n            <div className=\"status\">\r\n                <button type=\"button\" className={circleClass}\r\n                    style={{}} {...props}>\r\n                </button>\r\n                <div className=\"status-text\">\r\n                    {promptText}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst FigureButton = (props: Props): JSX.Element => {\r\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\r\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\r\n    return (\r\n        <figure className=\"flex\" {...props}>\r\n            {imageSrc &&\r\n                <img src={imageSrc} alt={caption} />}\r\n            <figcaption>{caption}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [current, send] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect((context) => {\r\n                context.asr.start()\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n            recStop: asEffect((context) => {\r\n                context.asr.abort()\r\n                /* console.log('Recognition stopped.'); */\r\n            }),\r\n            ttsStart: asEffect((context) => {\r\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\r\n                console.log(\"S>\", context.ttsAgenda)\r\n                utterance.voice = context.voice\r\n                utterance.onend = () => send('ENDSPEECH')\r\n                context.tts.speak(utterance)\r\n            }),\r\n            ttsStop: asEffect((context) => {\r\n                /* console.log('TTS STOP...'); */\r\n                context.tts.cancel()\r\n            }),\r\n            ponyfillASR: asEffect((context, _event) => {\r\n                const\r\n                    { SpeechRecognition }\r\n                        = createSpeechRecognitionPonyfill({\r\n                            audioContext: context.audioCtx,\r\n                            credentials: {\r\n                                region: REGION,\r\n                                authorizationToken: context.azureAuthorizationToken,\r\n                            }\r\n                        });\r\n                context.asr = new SpeechRecognition()\r\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\r\n                context.asr.continuous = true\r\n                context.asr.interimResults = true\r\n                context.asr.onresult = function(event: any) {\r\n                    var result = event.results[0]\r\n                    if (result.isFinal) {\r\n                        send({\r\n                            type: \"ASRRESULT\", value:\r\n                                [{\r\n                                    \"utterance\": result[0].transcript,\r\n                                    \"confidence\": result[0].confidence\r\n                                }]\r\n                        })\r\n                    } else {\r\n                        send({ type: \"STARTSPEECH\" });\r\n                    }\r\n                }\r\n\r\n            })\r\n        }\r\n    });\r\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\r\n        .map(\r\n            (o: any, i: any) => (\r\n                <FigureButton state={current}\r\n                    alternative={o.visual_information}\r\n                    key={i}\r\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\r\n            )\r\n        )\r\n\r\n    switch (true) {\r\n        default:\r\n            return (\r\n                <div className=\"App\">\r\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\r\n                    <div className=\"select-wrapper\">\r\n                        <div className=\"select\">\r\n                            {figureButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n};\r\n\r\nconst getAuthorizationToken = () => (\r\n    fetch(new Request(TOKEN_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\r\n        },\r\n    })).then(data => data.text()))\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}